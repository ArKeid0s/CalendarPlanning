@using CalendarPlanning.Shared.Models.DTO;
@using CalendarPlanning.Shared.ModelExtensions;
@using CalendarPlanning.Shared.Models.Requests.IncentiveValueRequests;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IIncentiveValuesService IncentiveValuesService

<MudText Typo="Typo.h3">
    Incentive Values
    @if (!_isEditing)
    {
        <MudIcon Icon="@Icons.Material.Filled.Lock" Color="Color.Error" Size="Size.Large" Title="Edition locked" />
    }
    else
    {
        <MudIcon Icon="@Icons.Material.Filled.LockOpen" Color="Color.Warning" Size="Size.Large" Title="Edition unlocked" />
    }
</MudText>

@if (incentiveValues is null)
{
    <MudProgressCircular Size="Size.Medium" Indeterminate="true" />
}

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Checked="@_isEditing" Color="Color.Primary">Edit Values</MudSwitch>
</div>
<MudDataGrid T="IncentiveValueDto" Items="@incentiveValues" ReadOnly="@(!_isEditing)" EditMode="DataGridEditMode.Form" CommittedItemChanges="@CommittedItemChanges"
             Hover="true" Striped="true" Bordered="true" Dense="false" EditTrigger="DataGridEditTrigger.OnRowClick" Elevation="1">

    <Columns>
        <PropertyColumn Title="Name" Property="x => x.Name" IsEditable="false" />
        <PropertyColumn Title="Unifocal Value" Property="x => x.UnifocalValue">
            <EditTemplate>
                <MudNumericField @bind-Value="@context.Item.UnifocalValue" Variant="Variant.Text" Min="0" Step=".1M" />
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Title="Progressive Value" Property="x => x.ProgressiveValue">
            <EditTemplate>
                <MudNumericField @bind-Value="@context.Item.ProgressiveValue" Variant="Variant.Text" Min="0" Step=".1M" />
            </EditTemplate>
        </PropertyColumn>
    </Columns>

</MudDataGrid>

@code {
    private List<IncentiveValueDto>? incentiveValues;
    private bool _isEditing = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity!.IsAuthenticated)
        {
            await LoadIncentiveValues();
        }
    }

    public async Task LoadIncentiveValues()
    {
        incentiveValues = await IncentiveValuesService.GetAllAsync();
    }

    private async void CommittedItemChanges(IncentiveValueDto incentiveValue)
    {
        UpdateIncentiveValueRequest request = new UpdateIncentiveValueRequest
            {
                UnifocalValue = incentiveValue.UnifocalValue,
                ProgressiveValue = incentiveValue.ProgressiveValue
            };

        bool result = await IncentiveValuesService.UpdateIncentiveValue(incentiveValue.Id, request);
    }
}
