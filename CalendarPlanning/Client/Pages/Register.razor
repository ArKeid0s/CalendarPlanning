@page "/register"
@using CalendarPlanning.Shared.Models.Requests.AuthenticationRequests;
@inject IAuthenticationService AuthService
@inject NavigationManager NavigationManager

<h1>Register</h1>

@if (registerResult != null && !registerResult.Succeeded)
{
    <div class="alert alert-danger">@registerResult.ErrorMessage</div>
}

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Please enter your details</h5>
        <EditForm Model="registerUserRequest" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email address</label>
                <InputText id="email" class="form-control" @bind-Value="registerUserRequest.Email" />
                <ValidationMessage For="@(() => registerUserRequest.Email)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="registerUserRequest.Password" />
                <ValidationMessage For="@(() => registerUserRequest.Password)" />
            </div>
            <div class="form-group">
                <label for="confirmPassword">Confirm Password</label>
                <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="registerUserRequest.ConfirmPassword" />
                <ValidationMessage For="@(() => registerUserRequest.ConfirmPassword)" />
            </div>

            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">@buttonLabel</button>
        </EditForm>
    </div>
</div>

@code {
    private RegisterUserRequest registerUserRequest = new RegisterUserRequest();
    private RegisterResult? registerResult;
    private bool isSubmitting = false;
    private string buttonLabel => isSubmitting ? "Loading..." : "Register";

    private async Task HandleRegistration()
    {
        isSubmitting = true;
        registerResult = await AuthService.Register(registerUserRequest);

        if (registerResult.Succeeded)
        {
            NavigationManager.NavigateTo("/login");
        }

        isSubmitting = false;
    }
}
