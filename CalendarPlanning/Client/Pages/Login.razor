@page "/login"
@using CalendarPlanning.Shared.Models.Requests.AuthenticationRequests;
@inject IAuthenticationService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Login</PageTitle>
<MudText Typo="Typo.h3">Login</MudText>
<MudText Typo="Typo.h5">Please enter your details</MudText>

@if (showErrorMessage)
{
    <MudAlert Severity="Severity.Error" Class="my-3">@errorMessage</MudAlert>
}

<EditForm Model="loginUserRequest" OnValidSubmit="@HandleLogin">
    <DataAnnotationsValidator />
    <MudGrid Class="my-3">
        <MudItem xs="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Email" InputType="InputType.Email" @bind-Value="loginUserRequest.Email" For="@(() => loginUserRequest.Email)" />
                    <MudTextField Label="Password" InputType="InputType.Password" Class="mt-3" @bind-Value="loginUserRequest.Password" For="@(() => loginUserRequest.Password)" />
                </MudCardContent>
                <MudCardActions Class="d-flex align-center justify-center">
                    <MudButton ButtonType="ButtonType.Submit" Disabled="@isSubmitting" Variant="Variant.Filled" Color="Color.Primary">
                        @if (isSubmitting)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2 cursor-wait">Loading...</MudText>
                        }
                        else
                        {
                            <MudText>Login</MudText>
                        }
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                If you don't have an account, please <MudLink Href="/register" Underline="Underline.Always" Typo="Typo.body2">register</MudLink>
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private LoginUserRequest loginUserRequest = new LoginUserRequest();
    private bool showErrorMessage = false;
    private string errorMessage = string.Empty;
    private bool isSubmitting = false;

    private async Task HandleLogin()
    {
        showErrorMessage = false;
        isSubmitting = true;

        var result = await AuthService.Login(loginUserRequest);

        if (result.Succeeded)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            errorMessage = result.ErrorMessage;
            showErrorMessage = true;
        }

        isSubmitting = false;
    }
}
