@page "/register"
@using CalendarPlanning.Shared.Models.DTO;
@using CalendarPlanning.Shared.Models.Requests.AuthenticationRequests;
@inject IAuthenticationService AuthService
@inject IStoresService StoresService
@inject NavigationManager NavigationManager

<PageTitle>Register</PageTitle>
<MudText Typo="Typo.h3">Register</MudText>

@if (registerResult != null && !registerResult.Succeeded)
{
    <MudAlert Severity="Severity.Error" Class="my-3">@registerResult.ErrorMessage</MudAlert>
}

@if (stores is null)
{
    <MudProgressCircular Class="my-3" Size="Size.Small" Indeterminate="true" />
}
else
{
    <EditForm Model="registerUserRequest" OnValidSubmit="@HandleRegistration">
        <DataAnnotationsValidator />

        <MudGrid Class="my-3">
            <MudItem xs="12">
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="First Name" @bind-Value="registerUserRequest.FirstName" For="@(() => registerUserRequest.FirstName)" Required />
                         <MudTextField Label="Last Name" @bind-Value="registerUserRequest.LastName" For="@(() => registerUserRequest.LastName)" Required Class="mt-3" />
                         <MudSelect Label="Store" T="string" @bind-Value="registerUserRequest.StoreName" For="@(() => registerUserRequest.StoreName)" Required AnchorOrigin="Origin.BottomCenter" Class="mt-3">
                             @foreach (var store in stores)
                            {
                                <MudSelectItem Value="@store.Name">@store.Name</MudSelectItem>
                            }
                        </MudSelect>
                        <MudTextField Label="Email address" InputType="InputType.Email" @bind-Value="registerUserRequest.Email" For="@(() => registerUserRequest.Email)" Required Class="mt-3" />
                         <MudTextField Label="Password" InputType="InputType.Password" @bind-Value="registerUserRequest.Password" For="@(() => registerUserRequest.Password)" Required Class="mt-3" />
                         <MudTextField Label="Confirm Password" InputType="InputType.Password" @bind-Value="registerUserRequest.ConfirmPassword" For="@(() => registerUserRequest.ConfirmPassword)" Required Class="mt-3" />
                     </MudCardContent>
                     <MudCardActions Class="d-flex align-center justify-center">
                         <MudButton ButtonType="ButtonType.Submit" Disabled="@isSubmitting" Variant="Variant.Filled" Color="Color.Primary">
                             @if (isSubmitting)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2 cursor-wait">Loading...</MudText>
                            }
                            else
                            {
                                <MudText>Register</MudText>
                            }
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </EditForm>
}

@code {
    private RegisterUserRequest registerUserRequest = new RegisterUserRequest();
    private RegisterResult? registerResult;
    private bool isSubmitting = false;
    private List<StoreDto>? stores;

    protected override async Task OnInitializedAsync()
    {
        stores = await StoresService.GetAllAsync();
    }

    private async Task HandleRegistration()
    {
        isSubmitting = true;
        registerResult = await AuthService.Register(registerUserRequest);

        if (registerResult?.Succeeded == true)
        {
            NavigationManager.NavigateTo("/login");
        }

        isSubmitting = false;
    }
}
