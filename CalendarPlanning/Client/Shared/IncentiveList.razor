@using CalendarPlanning.Shared.Enums;
@using CalendarPlanning.Shared.Models.DTO;
@using Microsoft.AspNetCore.Components.QuickGrid;
@using System.Security.Claims;
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (incentives is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="grid" tabindex="-1">
        <QuickGrid Items="incentives.AsQueryable()" Virtualize="true">
            <TemplateColumn Title="Client" SortBy="@sortByName">
                <div class="flex items-center">
                    <p><span class="text-uppercase">@context.ClientLastName</span> @context.ClientFirstName</p>
                </div>
            </TemplateColumn>
            <PropertyColumn Title="Incentive Unifocal" Property="i => i.IncentiveUnifocal" />
            <PropertyColumn Title="Incentive Progressive" Property="i => i.IncentiveProgressive" />
        </QuickGrid>
    </div>

}


@code {
    private List<IncentiveDto>? incentives;
    private string userId = string.Empty;

    GridSort<IncentiveDto> sortByName = GridSort<IncentiveDto>
        .ByAscending(p => p.ClientLastName)
        .ThenAscending(p => p.ClientFirstName);

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity!.IsAuthenticated)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)!.Value;

            await LoadIncentives(user.IsInRole("Admin"));
        }
    }

    public async Task LoadIncentives(bool isAdmin)
    {
        if (isAdmin) {
            incentives = await Http.GetFromJsonAsync<List<IncentiveDto>>("api/Incentives");
        }
        else
        {
            incentives = await Http.GetFromJsonAsync<List<IncentiveDto>>($"api/Incentives/IncentivesOfUser/{userId}");
        }

        StateHasChanged();
    }
}
