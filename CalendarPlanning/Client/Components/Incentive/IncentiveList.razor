@using CalendarPlanning.Shared.Enums;
@using CalendarPlanning.Shared.Models.DTO;
@using System.Security.Claims;
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IIncentivesService IncentivesService
@inject IEmployeesService EmployeesService

@if (Incentives is null)
{
    <MudProgressCircular Size="Size.Medium" Indeterminate="true" />
}

@if (_isAdmin && _employees is not null)
{
    <MudText Typo="Typo.h3" Class="my-3">Incentives</MudText>
    <MudTabs Elevation="0" Rounded="false" ApplyEffectsToContainer="false" PanelClass="pa-6">
        <ChildContent>
            @foreach (EmployeeDto employee in _employees)
            {
                <MudTabPanel Text="@($"{employee.FirstName} {employee.LastName}")">
                    <MudDataGrid Items="@Incentives!.Where((i) => i.EmployeeId == employee.EmployeeId)" T="IncentiveDto" Filterable="false" SortMode="SortMode.None" Groupable="false" Virtualize="true" FixedHeader="true" Height="500px" Elevation="0" Striped="true" Hover="true">
                        <Columns>
                            <PropertyColumn Title="First Name" Property="x => x.ClientFirstName" />
                            <PropertyColumn Title="Last Name" Property="x => x.ClientLastName" />
                            <PropertyColumn Title="Last Name" Property="x => x.IncentiveUnifocal" />
                            <PropertyColumn Title="Last Name" Property="x => x.IncentiveProgressive" />
                            <TemplateColumn CellClass="d-flex justify-end">
                                <CellTemplate>
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" Color="Color.Error" OnClick="@(() => HandleDeleteIncentive(context.Item.IncentiveId))" />
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                        <PagerContent>
                            <MudDataGridPager T="IncentiveDto" />
                        </PagerContent>
                    </MudDataGrid>
                </MudTabPanel>
            }
        </ChildContent>
    </MudTabs>
}
else
{
    <MudToolBar WrapContent="true">
        <MudText Typo="Typo.h3">My Incentives</MudText>
        <MudSpacer />
        <IncentivesValueCalculator />
    </MudToolBar>
    <MudDataGrid Items="@Incentives" T="IncentiveDto" Filterable="false" SortMode="SortMode.None" Groupable="false" Virtualize="true" FixedHeader="true" Height="500px" Elevation="0" Striped="true" Hover="true">
        <Columns>
            <PropertyColumn Title="First Name" Property="x => x.ClientFirstName" />
            <PropertyColumn Title="Last Name" Property="x => x.ClientLastName" />
            <PropertyColumn Title="Last Name" Property="x => x.IncentiveUnifocal" />
            <PropertyColumn Title="Last Name" Property="x => x.IncentiveProgressive" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" Color="Color.Error" OnClick="@(() => HandleDeleteIncentive(context.Item.IncentiveId))" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="IncentiveDto" />
        </PagerContent>
    </MudDataGrid>
}

<MudMessageBox @ref="messageBox" Title="Warning" CancelText="Cancel">
    <MessageContent>
        Deleting can <b>not</b> be undone!
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever" Class="ml-3">Delete!</MudButton>
    </YesButton>
</MudMessageBox>

@code {
    [Parameter]
    public List<IncentiveDto>? Incentives { get; set; }
    private List<EmployeeDto>? _employees;
    private MudMessageBox? messageBox;

    private string _userId = string.Empty;
    private bool _isAdmin;

    protected override async Task OnInitializedAsync()
    {
        (_userId, _isAdmin) = await IncentivesService.GetUserRoleDetails();
        Incentives = await IncentivesService.LoadIncentivesAsync(_isAdmin, _userId);
        _employees = await EmployeesService.GetAllAsync();
    }

    private async Task HandleDeleteIncentive(Guid id)
    {
        bool? result = await messageBox!.Show();
        if (result is not null && result is true)
        {
            await IncentivesService.DeleteIncentiveAsync(_userId, id);
            Incentives = await IncentivesService.LoadIncentivesAsync(_isAdmin, _userId);
        }
    }
}