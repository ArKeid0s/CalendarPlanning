@typeparam TEnum

@if (Enum.GetValues(typeof(TEnum)) is TEnum[] values)
{
    <select @attributes="@AdditionalAttributes" value="@Value" @onchange="OnValueChanged" >
        @foreach (var value in values)
        {
            <option value="@value">@value</option>
        }
    </select>
}

@code {
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; } = new();

    [Parameter]
    public TEnum? Value { get; set; }

    [Parameter]
    public EventCallback<TEnum?> ValueChanged { get; set; }

    private Task OnValueChanged(ChangeEventArgs e)
    {
        if (Enum.TryParse(typeof(TEnum), e.Value?.ToString(), out var value))
        {
            Value = (TEnum)value;
        }

        return ValueChanged.InvokeAsync(Value);
    }
}
