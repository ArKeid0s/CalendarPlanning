@using CalendarPlanning.Shared.Enums;
@using CalendarPlanning.Shared.Models.Requests.IncentiveRequests;
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Create Incentive</h3>

<EditForm Model="@createIncentiveRequest" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <div>
        <label for="clientFirstName">Client First Name:</label>
        <InputText id="clientFirstName" @bind-Value="createIncentiveRequest.ClientFirstName" />
        <ValidationMessage For="@(() => createIncentiveRequest.ClientFirstName)" />
    </div>
    <div>
        <label for="clientLastName">Client Last Name:</label>
        <InputText id="clientLastName" @bind-Value="createIncentiveRequest.ClientLastName" />
        <ValidationMessage For="@(() => createIncentiveRequest.ClientLastName)" />
    </div>

    <!-- Note that Blazor doesn't have built-in input components for enums.
         You might want to create your own custom component or use select input like this: -->
    <div>
        <label for="incentiveUnifocal">Incentive Unifocal:</label>
        <EnumInput id="incentiveUnifocal" class="form-select" @bind-Value="@createIncentiveRequest.IncentiveUnifocal" />
    </div>
    <div>
        <label for="incentiveProgressive">Incentive Progressive:</label>
        <EnumInput id="incentiveProgressive" class="form-select" @bind-Value="@createIncentiveRequest.IncentiveProgressive" />
    </div>

    <!-- If EmployeeId is a user input, use InputText for it.
         If not, set it manually in the HandleValidSubmit method. -->
    <div>
        <label for="employeeId">Employee Id:</label>
        <InputText id="employeeId" @bind-Value="employeeId" />
        <ValidationMessage For="@(() => createIncentiveRequest.EmployeeId)" />
    </div>

    <button type="submit">Create Incentive</button>
</EditForm>

@code {
    [Parameter]
    public EventCallback OnIncentiveCreated { get; set; }

    private CreateIncentiveRequest createIncentiveRequest = new();
    private string? employeeId;

    private async Task HandleValidSubmit()
    {
        // TODO: set employeeId to the current user's ID
        if (employeeId is not null) createIncentiveRequest.EmployeeId = new Guid(employeeId);
        var response = await Http.PostAsJsonAsync("/api/Incentives", createIncentiveRequest);

        if (response.IsSuccessStatusCode)
        {
            // Optionally navigate to another page
            //NavigationManager.NavigateTo("/");
            await OnIncentiveCreated.InvokeAsync();
        }
        else
        {
            // Handle error
        }
    }
}
