@using CalendarPlanning.Shared.Enums;
@using CalendarPlanning.Shared.Models.Requests.IncentiveRequests;
@using System.Security.Claims;
@inject IIncentivesService IncentivesService
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudText Typo="Typo.h3">Create Incentive</MudText>

<EditForm Model="@createIncentiveRequest" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <MudGrid Class="my-3">
        <MudItem xs="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Client First Name" @bind-Value="createIncentiveRequest.ClientFirstName" For="@(() => createIncentiveRequest.ClientFirstName)" />
                    <MudTextField Label="Client Last Name" @bind-Value="createIncentiveRequest.ClientLastName" For="@(() => createIncentiveRequest.ClientLastName)" Class="mt-3" />
                    <MudSelect @bind-Value="createIncentiveRequest.IncentiveUnifocal" T="IncentiveTypeEnum" Label="Unifocal Incentive" Variant="Variant.Filled" Required RequiredError="You must select an incentive type." AnchorOrigin="Origin.BottomCenter" Class="mt-3">
                        @foreach (IncentiveTypeEnum incentive in Enum.GetValues(typeof(IncentiveTypeEnum)))
                        {
                            <MudSelectItem Value="@incentive">@incentive</MudSelectItem>
                        }
                    </MudSelect>
                    <MudSelect @bind-Value="createIncentiveRequest.IncentiveProgressive" Label="Progressive Incentive" Variant="Variant.Filled" Required RequiredError="You must select an incentive type." AnchorOrigin="Origin.BottomCenter" Class="mt-3">
                        @foreach (IncentiveTypeEnum incentive in Enum.GetValues(typeof(IncentiveTypeEnum)))
                        {
                            <MudSelectItem Value="@incentive">@incentive</MudSelectItem>
                        }
                    </MudSelect>
                </MudCardContent>
                <MudCardActions Class="d-flex align-center justify-center">
                    <MudButton ButtonType="ButtonType.Submit" Disabled="@isSubmitting" Variant="Variant.Filled" Color="Color.Primary">
                        @if (isSubmitting)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2 cursor-wait">Loading...</MudText>
                        }
                        else
                        {
                            <MudText>Create</MudText>
                        }
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Parameter]
    public EventCallback OnIncentiveCreated { get; set; }

    private CreateIncentiveRequest createIncentiveRequest = new();
    private bool isSubmitting = false;

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity!.IsAuthenticated)
        {
            createIncentiveRequest.EmployeeId = user.FindFirst(ClaimTypes.NameIdentifier)!.Value;
        }

        var response = await IncentivesService.CreateIncentiveAsync(createIncentiveRequest);

        if (response.IsSuccessStatusCode)
        {
            await OnIncentiveCreated.InvokeAsync();
        }
        else
        {
            // Handle error
        }

        isSubmitting = false;
    }
}
