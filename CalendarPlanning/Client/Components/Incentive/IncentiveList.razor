@using CalendarPlanning.Shared.Enums;
@using CalendarPlanning.Shared.Models.DTO;
@using Microsoft.AspNetCore.Components.QuickGrid;
@using System.Security.Claims;
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IIncentivesService IncentivesService

@if (Incentives is null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (_isAdmin)
    {
        
    }
    else
    {
        <div class="grid" tabindex="-1">
            <QuickGrid Items="Incentives.AsQueryable()" Virtualize="true">
                <TemplateColumn Title="Client" SortBy="@sortByName">
                    <div class="flex items-center">
                        <p><span class="text-uppercase">@context.ClientLastName</span> @context.ClientFirstName</p>
                    </div>
                </TemplateColumn>
                <PropertyColumn Title="Incentive Unifocal" Property="i => i.IncentiveUnifocal" />
                <PropertyColumn Title="Incentive Progressive" Property="i => i.IncentiveProgressive" />
            </QuickGrid>
        </div>
    }
}


@code {
    [Parameter]
    public List<IncentiveDto>? Incentives { get; set; }
    private List<EmployeeDto>? _employees;
    private string _userId = string.Empty;
    private bool _isAdmin;

    GridSort<IncentiveDto> sortByName = GridSort<IncentiveDto>
        .ByAscending(p => p.ClientLastName)
        .ThenAscending(p => p.ClientFirstName);

    protected override async Task OnInitializedAsync()
    {
        (var userId, _isAdmin) = await IncentivesService.GetUserRoleDetails();
        Incentives = await IncentivesService.LoadIncentivesAsync(_isAdmin, userId);
    }
}
